2024-11-22 08:23:26,388 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun 23 2021, 15:28:49) [GCC 8.3.0]
CUDA available: True
GPU 0: Tesla T4
CUDA_HOME: None
GCC: gcc (Debian 8.3.0-6) 8.3.0
PyTorch: 1.7.0+cu101
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.8.1
OpenCV: 4.10.0
MMCV: 1.3.17
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.1
MMDetection: 2.25.0+unknown
------------------------------------------------------------

2024-11-22 08:23:26,778 - mmdet - INFO - Distributed training: False
2024-11-22 08:23:27,158 - mmdet - INFO - Config:
optimizer = dict(
    type='SGD',
    lr=0.01,
    momentum=0.9,
    weight_decay=0.0005,
    nesterov=True,
    paramwise_cfg=dict(norm_decay_mult=0.0, bias_decay_mult=0.0))
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='YOLOX',
    warmup='exp',
    by_epoch=False,
    warmup_by_epoch=True,
    warmup_ratio=1,
    warmup_iters=5,
    num_last_epochs=15,
    min_lr_ratio=0.05)
runner = dict(type='EpochBasedRunner', max_epochs=300)
checkpoint_config = dict(interval=10)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [
    dict(type='YOLOXModeSwitchHook', num_last_epochs=15, priority=48),
    dict(type='SyncNormHook', num_last_epochs=15, interval=10, priority=48),
    dict(
        type='ExpMomentumEMAHook',
        resume_from=None,
        momentum=0.0001,
        priority=49)
]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
auto_scale_lr = dict(enable=False, base_batch_size=16)
img_scale = (640, 640)
NUM_C = 11
model = dict(
    type='YOLOX',
    input_size=(640, 640),
    random_size_range=(15, 25),
    random_size_interval=10,
    backbone=dict(
        type='CSPDarknet',
        act_cfg=dict(type='LeakyReLU', negative_slope=0.1),
        deepen_factor=0.33,
        widen_factor=0.5),
    neck=dict(
        type='YOLOXPAFPN',
        in_channels=[128, 256, 512],
        out_channels=128,
        act_cfg=dict(type='LeakyReLU', negative_slope=0.1),
        num_csp_blocks=1),
    bbox_head=dict(
        type='YOLOXHead',
        num_classes=11,
        act_cfg=dict(type='LeakyReLU', negative_slope=0.1),
        in_channels=128,
        feat_channels=128),
    train_cfg=dict(assigner=dict(type='SimOTAAssigner', center_radius=2.5)),
    test_cfg=dict(score_thr=0.01, nms=dict(type='nms', iou_threshold=0.65)))
data_root = '/mnt/dataset/'
dataset_type = 'CocoDataset'
img_norm_cfg = dict(
    mean=[128.0, 128.0, 128.0], std=[256.0, 256.0, 256.0], to_rgb=True)
train_pipeline = [
    dict(type='Mosaic', img_scale=(640, 640), pad_val=114.0),
    dict(
        type='RandomAffine', scaling_ratio_range=(0.1, 2),
        border=(-320, -320)),
    dict(
        type='MixUp',
        img_scale=(640, 640),
        ratio_range=(0.8, 1.6),
        pad_val=114.0),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='Resize', img_scale=(640, 640), keep_ratio=True),
    dict(
        type='Pad',
        pad_to_square=True,
        pad_val=dict(img=(114.0, 114.0, 114.0))),
    dict(
        type='Normalize',
        mean=[128.0, 128.0, 128.0],
        std=[256.0, 256.0, 256.0],
        to_rgb=True),
    dict(type='FilterAnnotations', min_gt_bbox_wh=(1, 1), keep_empty=False),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
train_dataset = dict(
    type='MultiImageMixDataset',
    dataset=dict(
        type='CocoDataset',
        ann_file='/mnt/dataset/annotations/train.json',
        img_prefix='/mnt/dataset/train/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True)
        ],
        filter_empty_gt=False),
    pipeline=[
        dict(type='Mosaic', img_scale=(640, 640), pad_val=114.0),
        dict(
            type='RandomAffine',
            scaling_ratio_range=(0.1, 2),
            border=(-320, -320)),
        dict(
            type='MixUp',
            img_scale=(640, 640),
            ratio_range=(0.8, 1.6),
            pad_val=114.0),
        dict(type='YOLOXHSVRandomAug'),
        dict(type='RandomFlip', flip_ratio=0.5),
        dict(type='Resize', img_scale=(640, 640), keep_ratio=True),
        dict(
            type='Pad',
            pad_to_square=True,
            pad_val=dict(img=(114.0, 114.0, 114.0))),
        dict(
            type='Normalize',
            mean=[128.0, 128.0, 128.0],
            std=[256.0, 256.0, 256.0],
            to_rgb=True),
        dict(
            type='FilterAnnotations', min_gt_bbox_wh=(1, 1), keep_empty=False),
        dict(type='DefaultFormatBundle'),
        dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
    ])
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(640, 640),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Pad',
                pad_to_square=True,
                pad_val=dict(img=(114.0, 114.0, 114.0))),
            dict(
                type='Normalize',
                mean=[128.0, 128.0, 128.0],
                std=[256.0, 256.0, 256.0],
                to_rgb=True),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=48,
    workers_per_gpu=12,
    persistent_workers=True,
    train=dict(
        type='MultiImageMixDataset',
        dataset=dict(
            type='CocoDataset',
            ann_file='/mnt/dataset/annotations/train.json',
            img_prefix='/mnt/dataset/train/',
            pipeline=[
                dict(type='LoadImageFromFile'),
                dict(type='LoadAnnotations', with_bbox=True)
            ],
            filter_empty_gt=False),
        pipeline=[
            dict(type='Mosaic', img_scale=(640, 640), pad_val=114.0),
            dict(
                type='RandomAffine',
                scaling_ratio_range=(0.1, 2),
                border=(-320, -320)),
            dict(
                type='MixUp',
                img_scale=(640, 640),
                ratio_range=(0.8, 1.6),
                pad_val=114.0),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(type='Resize', img_scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad',
                pad_to_square=True,
                pad_val=dict(img=(114.0, 114.0, 114.0))),
            dict(
                type='Normalize',
                mean=[128.0, 128.0, 128.0],
                std=[256.0, 256.0, 256.0],
                to_rgb=True),
            dict(
                type='FilterAnnotations',
                min_gt_bbox_wh=(1, 1),
                keep_empty=False),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file='/mnt/dataset/annotations/val.json',
        img_prefix='/mnt/dataset/val/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(640, 640),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Pad',
                        pad_to_square=True,
                        pad_val=dict(img=(114.0, 114.0, 114.0))),
                    dict(
                        type='Normalize',
                        mean=[128.0, 128.0, 128.0],
                        std=[256.0, 256.0, 256.0],
                        to_rgb=True),
                    dict(type='DefaultFormatBundle'),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file='/mnt/dataset/annotations/val.json',
        img_prefix='/mnt/dataset/val/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(640, 640),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Pad',
                        pad_to_square=True,
                        pad_val=dict(img=(114.0, 114.0, 114.0))),
                    dict(
                        type='Normalize',
                        mean=[128.0, 128.0, 128.0],
                        std=[256.0, 256.0, 256.0],
                        to_rgb=True),
                    dict(type='DefaultFormatBundle'),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
max_epochs = 300
num_last_epochs = 15
interval = 10
evaluation = dict(
    save_best='auto', interval=10, dynamic_intervals=[(285, 1)], metric='bbox')
work_dir = './work_dirs/yolox_s_8x8_300e_ours_img_norm'
auto_resume = False
gpu_ids = [0]

2024-11-22 08:23:27,160 - mmdet - INFO - Set random seed to 419795393, deterministic: False
2024-11-22 08:23:27,693 - mmdet - INFO - initialize CSPDarknet with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d', 'a': 2.23606797749979, 'distribution': 'uniform', 'mode': 'fan_in', 'nonlinearity': 'leaky_relu'}
2024-11-22 08:23:27,949 - mmdet - INFO - initialize YOLOXPAFPN with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d', 'a': 2.23606797749979, 'distribution': 'uniform', 'mode': 'fan_in', 'nonlinearity': 'leaky_relu'}
2024-11-22 08:23:28,299 - mmdet - INFO - initialize YOLOXHead with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d', 'a': 2.23606797749979, 'distribution': 'uniform', 'mode': 'fan_in', 'nonlinearity': 'leaky_relu'}
Name of parameter - Initialization information

backbone.stem.conv.conv.weight - torch.Size([32, 12, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stem.conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stem.conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.0.conv.weight - torch.Size([64, 32, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.main_conv.conv.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.main_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.main_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.short_conv.conv.weight - torch.Size([32, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.short_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.short_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.final_conv.conv.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.final_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.final_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([32, 32, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv2.conv.weight - torch.Size([32, 32, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage1.1.blocks.0.conv2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage1.1.blocks.0.conv2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.0.conv.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.main_conv.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.main_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.main_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.short_conv.conv.weight - torch.Size([64, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.short_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.short_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.final_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.final_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.final_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.0.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.0.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.1.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.1.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.1.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.2.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage2.1.blocks.2.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage2.1.blocks.2.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.0.conv.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.main_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.short_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.short_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.short_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.final_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.1.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.1.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.1.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.2.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage3.1.blocks.2.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage3.1.blocks.2.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.0.conv.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.0.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.0.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.1.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv2.conv.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.1.conv2.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.1.conv2.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.main_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.main_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.main_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.short_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.short_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.short_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.final_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.final_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.final_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

backbone.stage4.2.blocks.0.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

backbone.stage4.2.blocks.0.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.0.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.1.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.reduce_layers.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.0.blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.top_down_blocks.1.blocks.0.conv2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.1.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.downsamples.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.0.blocks.0.conv2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([512, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([256, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.bottom_up_blocks.1.blocks.0.conv2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.0.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.1.conv.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.2.conv.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

neck.out_convs.2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.0.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.0.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.0.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.1.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.1.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.1.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.2.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_cls_convs.2.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_cls_convs.2.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.0.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.0.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.0.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.1.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.1.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.1.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.0.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.2.0.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.0.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.1.conv.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_reg_convs.2.1.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_reg_convs.2.1.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of YOLOX  

bbox_head.multi_level_conv_cls.0.weight - torch.Size([11, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_cls.0.bias - torch.Size([11]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_cls.1.weight - torch.Size([11, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_cls.1.bias - torch.Size([11]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_cls.2.weight - torch.Size([11, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_cls.2.bias - torch.Size([11]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_reg.0.weight - torch.Size([4, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.0.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.1.weight - torch.Size([4, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.1.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.2.weight - torch.Size([4, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_reg.2.bias - torch.Size([4]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.0.weight - torch.Size([1, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_obj.1.weight - torch.Size([1, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  

bbox_head.multi_level_conv_obj.2.weight - torch.Size([1, 128, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

bbox_head.multi_level_conv_obj.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in YOLOXHead  
2024-11-22 08:23:45,594 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2024-11-22 08:23:45,683 - mmdet - INFO - Start running, host: root@f55a581982cb, work_dir: /mnt/work_dirs/yolox_s_8x8_300e_ours_img_norm
2024-11-22 08:23:45,684 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) YOLOXLrUpdaterHook                 
(49          ) ExpMomentumEMAHook                 
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) YOLOXLrUpdaterHook                 
(48          ) YOLOXModeSwitchHook                
(48          ) SyncNormHook                       
(49          ) ExpMomentumEMAHook                 
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) YOLOXLrUpdaterHook                 
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(49          ) ExpMomentumEMAHook                 
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(48          ) SyncNormHook                       
(49          ) ExpMomentumEMAHook                 
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-11-22 08:23:45,685 - mmdet - INFO - workflow: [('train', 1)], max: 300 epochs
2024-11-22 08:23:45,707 - mmdet - INFO - Checkpoints will be saved to /mnt/work_dirs/yolox_s_8x8_300e_ours_img_norm by HardDiskBackend.
